/** 列举交织在一起的位置，可以使用 {@link genRange} 函数辅助列举 */
type DetailRelation = Record<number, number[]>;
/** 一根电线与其他电线的位置关系 */
interface Relation {
	/** A 级关系，即毫无关系 */
	a: number[];
	/** B 级关系，即仅需不在同一层 */
	b: number[];
	/** C 级关系，即关系较为复杂，具体需列举 */
	c: DetailRelation;
}
/** 所有电线相互的关系 */
type RelationCollection = Record<number, Relation>;

/**
 * 辅助列举函数
 * @param from 从何处开始列举
 * @param sign 是否正向列举
 * @param to 列举最大值
 */
function genRange(from: number, sign: boolean, to = 100) {
	if (!sign) from = -from;
	return Array(to + 1 - from)
		.fill(from)
		.map((n, i) => (sign ? 0 : -(to + from)) + n + i);
}

const collection = {
	1: {
		a: [18],
		b: [7, 8, 9, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 25, 26, 27],
		c: {
			2: [0, 1],
			3: [0, 1],
			4: [0, 1],
			5: [0, 1],
			6: [0, ...genRange(1, true)],
			13: [0, 1],
			14: [0, 1],
			16: [3, ...genRange(4, true)],
			24: [-1, 0],
		},
	},
	2: {
		a: [3, 4, 5, 6, 7, 9, 14, 16, 18, 19, 20, 21, 23, 27],
		b: [8, 10],
		c: {
			11: [0, 1],
			12: [1, 2, 3],
			13: [2, ...genRange(3, true)],
			15: [0, 1],
			17: [0, 1, 2],
			22: [0, 1],
			24: [...genRange(-1, false), 0],
			25: [0, 1],
			26: [0, 1],
		},
	},
	3: {
		a: [7, 8, 9, 10, 16, 18, 24],
		b: [13, 17, 19, 20, 21, 22, 27],
		c: {
			4: [1, ...genRange(2, true)],
			5: [-1, 0],
			6: [0, 1],
			11: [-2, -1, 0],
			12: [-1, 0],
			14: [0, 1],
			15: [-1, 0],
			23: [-1, 0],
			25: [...genRange(-2, false), -1],
			26: [-1, 0, 1],
		},
	},
	4: {
		a: [6, 16],
		b: [9, 11, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27],
		c: {
			5: [...genRange(-1, false), 0],
			7: [-3, -2, -1, 0],
			8: [-1, 0],
			10: [-1, 0],
			12: [0, 1],
			13: [0, 1],
			14: [0, 1],
			24: [...genRange(-1, false), 0],
		},
	},
	5: {
		a: [16, 18, 24],
		b: [9, 11, 12, 15, 17, 19, 20, 21, 22, 23, 26, 27],
		c: {
			6: [0, ...genRange(1, true)],
			7: [-1, 0],
			8: [0, 1],
			10: [0, 1],
			13: [0, 1],
			14: [0, 1],
			25: [-1, 0],
		},
	},
	6: {
		a: [16, 18],
		b: [12, 15, 17, 19, 20, 21, 22, 23, 24, 27],
		c: {
			7: [...genRange(-1, false), 0],
			8: [-2, -1, 0],
			9: [-3, -2, -1, 0],
			10: [-1, 0],
			11: [-1, 0],
			13: [0, 1],
			14: [0, 1],
			25: [-1, 0],
			26: [-1, 0],
		},
	},
	7: {
		a: [16, 18],
		b: [11, 17, 19, 20, 21, 23, 25, 26, 27],
		c: {
			8: [0, ...genRange(1, true)],
			9: [-1, 0, 1],
			10: [0, 1, 2],
			12: [0, 1],
			13: [0, 1],
			14: [1, 2, 3],
			15: [0, 1],
			22: [0, 1],
			24: [-1, 0],
		},
	},
	8: {
		a: [9, 12, 13, 14, 15, 16, 18, 22, 25],
		b: [24],
		c: {
			10: [-1, 0],
			11: [0, 1, 2],
			17: [2, ...genRange(3, true)],
			19: [0, 1],
			20: [-1, 0],
			21: [-1, 0],
			23: [-1, 0, 1],
			26: [0, 1, 2, 3],
			27: [-1, 0],
		},
	},
	9: {
		a: [16, 18],
		b: [11, 19, 20, 21, 23, 24, 27],
		c: {
			10: [1, ...genRange(2, true)],
			12: [0, 1],
			13: [0, 1, 2],
			14: [1, ...genRange(2, true)],
			15: [0, 1],
			17: [0, 1],
			22: [0, 1],
			25: [-1, 0],
			26: [0, 1],
		},
	},
	10: {
		a: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27],
		b: [24],
		c: {},
	},
	11: {
		a: [13, 14, 15, 16, 17, 18, 22, 23, 26],
		b: [24],
		c: {
			12: [0, ...genRange(1, true)],
			19: [-1, 0],
			20: [...genRange(-2, false), -1],
			21: [-5, -4, -3, -2, -1, 0],
			25: [-1, 0],
			27: [-1, 0],
		},
	},
	12: {
		a: [13, 14, 15, 16, 18, 22, 25, 26],
		b: [],
		c: {
			17: [-1, 0],
			19: [-1, 0],
			20: [-1, 0],
			21: [-1, 0],
			23: [-1, 0],
			24: [-1, 0],
			27: [-1, 0],
		},
	},
	13: {
		a: [14, 16, 18, 25, 26],
		b: [17, 19, 27],
		c: {
			15: [...genRange(-1, false), 0],
			20: [-1, 0],
			21: [-1, 0],
			22: [...genRange(-2, false), -1],
			23: [-1, 0],
			24: [-1, 0],
		},
	},
	14: {
		a: [15, 16, 18, 25, 26],
		b: [20, 21, 27],
		c: {
			17: [0, 1],
			19: [0, 1],
			22: [-1, 0],
			23: [...genRange(-2, false), -1],
			24: [-2, -1, 0],
		},
	},
	15: {
		a: [16, 18, 25, 26],
		b: [20, 21, 27],
		c: {
			17: [0, 1],
			19: [0, 1],
			22: [-1, 0],
			23: [0, 1],
			24: [-1, 0],
		},
	},
	16: {
		a: [17, 18, 23, 24, 25, 26],
		b: [],
		c: {
			19: [1, 2, 3, 4],
			20: [0, 1, 2],
			21: [0, 1],
			22: [-1, 0, 1],
			27: [0, 1, 2],
		},
	},
	17: {
		a: [18, 22, 26],
		b: [19, 27],
		c: {
			20: [-3, -2, -1, 0],
			21: [-1, 0],
			23: [...genRange(-1, false), 0],
			24: [-1, 0],
			25: [...genRange(-2, false), -1],
		},
	},
	18: {
		a: [],
		b: [],
		c: {
			19: [0, 1, 2, 23, 24, 25, 26],
			20: [0, 1],
			21: [-1, 0],
			22: [...genRange(-3, false), -2],
			27: [-2, -1, 0],
		},
	},
	19: {
		a: [20],
		b: [23, 24],
		c: {
			21: [...genRange(-1, false), 0],
			22: [...genRange(-2, false), -1],
			25: [0, 1],
			26: [0, 1],
			27: [...genRange(-1, false), 0],
		},
	},
	20: {
		a: [],
		b: [24],
		c: {
			21: [-1, 0],
			22: [-4, -3, -2, -1, 0],
			23: [0, 1],
			25: [0, 1],
			26: [2, ...genRange(3, true)],
			27: [...genRange(-1, false), 0],
		},
	},
	21: {
		a: [27],
		b: [24],
		c: {
			22: [-1, 0],
			23: [0, 1],
			25: [0, 1],
			26: [2, ...genRange(3, true)],
		},
	},
	22: {
		a: [23, 25, 26],
		b: [],
		c: {
			24: [-1, 0],
			27: [0, 1, 2],
		},
	},
	23: {
		a: [26],
		b: [24, 27],
		c: { 25: [0, 1] },
	},
	24: {
		a: [],
		b: [25, 26, 27],
		c: {},
	},
	25: {
		a: [],
		b: [],
		c: {
			26: [0, ...genRange(1, true)],
			27: [-1, 0],
		},
	},
	26: {
		a: [],
		b: [],
		c: { 27: [-2, -1, 0] },
	},
} satisfies RelationCollection;
